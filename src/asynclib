#include <errno.h>
#include <fcntl.h>
#include <netdb.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/epoll.h>
#include <sys/types.h>
#include <unistd.h>

#include <functional>

/* generator macro */
#define async_context_start                                                    \
  static int state = 0;                                                        \
  switch (state) {                                                             \
  case 0:
#define async_context_end }
#define await(x)                                                               \
  {                                                                            \
    state = __LINE__;                                                          \
    return x;                                                                  \
  case __LINE__:;                                                              \
  }

/* sys lib */
namespace SocketLib {
auto listen = ::listen;
auto accept = ::accept;
auto bind = ::bind;
auto connect = ::connect;
auto socket = ::socket;
auto close = ::close;
auto read = ::read;
auto write = ::write;
auto fcntl = ::fcntl;
auto getaddrinfo = ::getaddrinfo;
auto freeaddrinfo = ::freeaddrinfo;
auto getnameinfo = ::getnameinfo;
auto getpeername = ::getpeername;
auto getsockname = ::getsockname;
auto getsockopt = ::getsockopt;
auto setsockopt = ::setsockopt;
auto shutdown = ::shutdown;
} // namespace SocketLib

/* async lib */
class AsyncServerSocket {
public:
  int getSocketFd();
  static bool makeNonBlocking(int fd);
};

class EventLoop {
  void run();
};